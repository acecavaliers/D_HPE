declare const _default: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    /***
     * Icon name for the upper circle corresponding to the tab
     */
    icon: {
        type: StringConstructor;
        default: string;
    };
    /***
     * Icon name for the upper circle corresponding to the tab
     */
    customIcon: {
        type: StringConstructor;
        default: string;
    };
    /***
     * Only render the content when the tab is active
     */
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    /***
     * Function to execute before tab switch. Return value must be boolean
     * If the return result is false, tab switch is restricted
     */
    beforeChange: {
        type: FunctionConstructor;
    };
    /***
    * Function to execute after tab switch. Return void for now.
    * Safe to assume necessary validation has already occured
    */
    afterChange: {
        type: FunctionConstructor;
    };
    route: {
        type: (ObjectConstructor | StringConstructor)[];
    };
    additionalInfo: {
        type: ObjectConstructor;
        default: () => void;
    };
}, any, {
    active: boolean;
    validationError: any;
    checked: boolean;
    tabId: string;
}, {
    shape(): any;
    color(): any;
    errorColor(): any;
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    icon?: unknown;
    customIcon?: unknown;
    lazy?: unknown;
    beforeChange?: unknown;
    afterChange?: unknown;
    route?: unknown;
    additionalInfo?: unknown;
} & {
    title: string;
    lazy: boolean;
    icon: string;
    customIcon: string;
    additionalInfo: Record<string, any>;
} & {
    beforeChange?: Function;
    afterChange?: Function;
    route?: string | Record<string, any>;
}>, {
    title: string;
    lazy: boolean;
    icon: string;
    customIcon: string;
    additionalInfo: Record<string, any>;
}>;
export default _default;
