import { ToolbarIdConfig } from "@/types";
declare const _default: (idConfig?: ToolbarIdConfig) => {
    appContainer: any;
    mainContainer: any;
    viewerContainer: any;
    eventBus: any;
    toolbar: {
        container: any;
        numPages: any;
        pageNumber: any;
        scaleSelectContainer: any;
        scaleSelect: any;
        customScaleOption: any;
        previous: any;
        next: any;
        zoomIn: any;
        zoomOut: any;
        viewFind: any;
        openFile: any;
        print: any;
        presentationModeButton: any;
        download: any;
        viewBookmark: any;
    };
    secondaryToolbar: {
        toolbar: any;
        toggleButton: any;
        toolbarButtonContainer: any;
        presentationModeButton: any;
        openFileButton: any;
        printButton: any;
        downloadButton: any;
        viewBookmarkButton: any;
        firstPageButton: any;
        lastPageButton: any;
        pageRotateCwButton: any;
        pageRotateCcwButton: any;
        cursorSelectToolButton: any;
        cursorHandToolButton: any;
        scrollVerticalButton: any;
        scrollHorizontalButton: any;
        scrollWrappedButton: any;
        spreadNoneButton: any;
        spreadOddButton: any;
        spreadEvenButton: any;
        documentPropertiesButton: any;
    };
    fullscreen: {
        contextFirstPage: any;
        contextLastPage: any;
        contextPageRotateCw: any;
        contextPageRotateCcw: any;
    };
    sidebar: {
        outerContainer: any;
        viewerContainer: any;
        toggleButton: any;
        thumbnailButton: any;
        outlineButton: any;
        attachmentsButton: any;
        thumbnailView: any;
        outlineView: any;
        attachmentsView: any;
    };
    sidebarResizer: {
        outerContainer: any;
        resizer: any;
    };
    findBar: {
        bar: any;
        toggleButton: any;
        findField: any;
        highlightAllCheckbox: any;
        caseSensitiveCheckbox: any;
        entireWordCheckbox: any;
        findMsg: any;
        findResultsCount: any;
        findPreviousButton: any;
        findNextButton: any;
    };
    passwordOverlay: {
        overlayName: string;
        container: any;
        label: any;
        input: any;
        submitButton: any;
        cancelButton: any;
    };
    documentProperties: {
        overlayName: string;
        container: any;
        closeButton: any;
        fields: {
            fileName: any;
            fileSize: any;
            title: any;
            author: any;
            subject: any;
            keywords: any;
            creationDate: any;
            modificationDate: any;
            creator: any;
            producer: any;
            version: any;
            pageCount: any;
            pageSize: any;
            linearized: any;
        };
    };
    errorWrapper: {
        container: any;
        errorMessage: any;
        closeButton: any;
        errorMoreInfo: any;
        moreInfoButton: any;
        lessInfoButton: any;
    };
    printContainer: any;
    openFileInputName: string;
};
export default _default;
//# sourceMappingURL=pdf-config.d.ts.map